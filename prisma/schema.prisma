// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id            Int         @id @default(autoincrement())
  text          String
  likes         Int      @default(0)
  published     Boolean     @default(false)
  attachments   String[]
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], name: "postOwnerProfile")
  userProfileId Int

  // comments
  parentPost   Post?   @relation(fields: [parentPostId], references: [id], name: "postComment")
  parentPostId Int?
  comments     Post[] @relation(name: "postComment")

  // likedPosts
  likedPostsFrom UserProfile[] @relation(name: "likedPosts")

  // Groups
  groupId Int

  @@map(name: "post")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  password      String
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map(name: "updated_at")
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id], name: "userProfile")
  userProfileId Int?         @unique

  // followers and following
  followerFrom UserProfile[] @relation(name: "followers")
  followingWho UserProfile[] @relation(name: "following")

  // Groups
  ownedGroups Group[] @relation(name: "groupOwner")
  memberGroups Group[] @relation(name: "groupMember")

  @@map(name: "users")
}

model UserProfile {
  id         Int      @id @default(autoincrement())
  owner      User?    @relation(name: "userProfile")
  avatar     String?
  name       String?
  ownedPosts Post[]   @relation(name: "postOwnerProfile")
  gender     String?
  birthDate  String? @map(name: "birth_date")
  city       String?
  about      String?

  // followers and following
  followers User[] @relation("followers")
  following User[] @relation("following")

  // likedPosts
  likedPosts Post[] @relation("likedPosts")

  @@map(name: "user_profile")
}

model Group {

    id Int @id @default(autoincrement())
    owner User @relation(fields: [ownerId], references: [id], name: "groupOwner")
    ownerId Int
    name String
    members User[] @relation(name: "groupMember")

}